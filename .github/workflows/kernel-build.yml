name: Build Linux Kernel

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        arch: [arm64]

    steps:
      - name: 🛠️ Check kernel source code
        uses: actions/checkout@v4

      - name: 🏗️ Install dependencies
        run: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y gcc-4.9 g++-4.9 gcc-9 g++-9 clang-9 llvm-9 lld-9
          sudo apt-get install -y bc bison flex libssl-dev libelf-dev ccache \
                                  build-essential libncurses5-dev \
                                  make python3 gcc-aarch64-linux-gnu crossbuild-essential-arm64

      - name: 🔧 Set environment
        run: |
          echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "CC=gcc-4.9" >> $GITHUB_ENV
          echo "CXX=g++-4.9" >> $GITHUB_ENV
          echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV

      - name: 📑 Clean & Configure kernel
        run: |
          make clean && make mrproper
          make pme_defconfig

      - name: 🚀 Compile source code
        run: |
          make CC=$CC -j$(nproc) ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE Image.gz-dtb

      - name: 🏗️ Generate boot.img
        run: |
          mkbootimg --kernel arch/arm64/boot/Image.gz-dtb \
                    --ramdisk initrd.img \
                    --base 0x80000000 \
                    --cmdline "console=ttyMSM0,115200n8" \
                    --output boot.img

      - name: 📦 Upload result
        uses: actions/upload-artifact@v4
        with:
          name: boot-img
          path: boot.img
